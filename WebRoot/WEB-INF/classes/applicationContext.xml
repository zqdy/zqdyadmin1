<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">

<!--
  - Application context definition for JPetStore's data access layer.
  - Accessed by business layer objects defined in "applicationContext.xml"
  - (see web.xml's "contextConfigLocation").
  -
  - This version of the data access layer works on a combined database,
  - using a local DataSource with DataSourceTransactionManager. It does not
  - need any JTA support in the container: It will run as-is in plain Tomcat.
  -->
<beans>

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

	<!-- Local Apache Commons DBCP DataSource that refers to a combined database -->
	<!-- (see dataAccessContext-jta.xml for an alternative) -->
	<!-- The placeholders are resolved from jdbc.properties through -->
	<!-- the PropertyPlaceholderConfigurer in applicationContext.xml -->
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:/jdbc.properties</value>
        </property>
    </bean>  
	<!-- 注入所有的spring配置文件  --> 
	<import resource="classpath*:com/**/spring-*.xml" />	
	
	<bean id="DataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/> 
	    <property name="maxActive" value="30" />   <!--连接池的最大数据库连接数，设为0表示无限制  -->
       <property name="maxIdle" value="0" />   <!-- 数据库连接的最大空闲时间。超过此空闲时间，数据库连接将被标记为不可用，然后被释放。设为0表示无限制 -->
       <property name="maxWait" value="1000" />   <!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为－1表示无限制 -->
       <property name="defaultAutoCommit" value="true"/>   <!--  -->
       <property name="removeAbandoned" value="true"/>   <!--回收被遗弃的（一般是忘了释放的）数据库连接到连接池中  -->
       <property name="removeAbandonedTimeout" value="30"/>   <!--数据库连接过多长时间不用将被视为被遗弃而收回连接池中  -->
       <property name="logAbandoned" value="true"/>  <!--将被遗弃的数据库连接的回收记入日志  -->
	</bean>
	
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="DataSource" />
		</property>
	</bean>

	<!-- Transaction manager for a single JDBC DataSource -->
	<!-- (see dataAccessContext-jta.xml for an alternative) -->
	 
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="DataSource" />
		</property>		
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">false</prop>
				<!-- <prop key="hibernate.connection.autocommit">true</prop> -->
				<prop key="hibernate.connection.release_mode">
					auto
				</prop>				
				
			</props>
		</property>
	
		<!-- 加载所有的hibernate的配置文件  -->
		<property name="mappingLocations">
			<list>
				<value>classpath:com/zqdy/**/*.hbm.xml</value>
			</list>
		</property>
	</bean>	
	
	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 事务拦截器 -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<!-- 事务管理器 -->
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="create*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="start*">PROPAGATION_REQUIRED</prop>
				<prop key="cancel*">PROPAGATION_REQUIRED</prop>
				<prop key="stop*">PROPAGATION_REQUIRED</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="remove*">PROPAGATION_REQUIRED</prop>
				<prop key="snatch*">PROPAGATION_REQUIRED</prop>
				
			</props>
		</property>
	</bean>

	<!-- 定义所有的BPO自动添加事务拦截器 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>
		<property name="interceptorNames">
			<!-- 事务拦截器 -->
			<list>
				
				<value>transactionInterceptor</value>
				<!-- 异常处理拦截器,异常处理拦截器要在事务拦截器之后,因为可以会有数据库错误等事务相关的异常 -->
				
			</list>
		</property>
	</bean>

	<bean id="baseAction" 
		class="com.zqdy.struts.BaseAction" abstract="true">
	</bean>
	
</beans>
